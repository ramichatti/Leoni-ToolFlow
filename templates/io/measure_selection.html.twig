{% extends 'base.html.twig' %}

{% block title %}Select Measure - {{ tool.id }}{% endblock %}

{% block stylesheets %}
<style>
    body {
        padding-top: 70px;
        background-color: #f8f9fc;
        font-family: 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    }

    .selection-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 2.5rem;
        background-color: white;
        border-radius: 1.25rem;
        box-shadow: 0 0.75rem 1.5rem rgba(18, 38, 63, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .selection-container:hover {
        transform: translateY(-5px);
        box-shadow: 0 1rem 2rem rgba(18, 38, 63, 0.12);
    }

    .selection-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 2.5rem;
        padding-bottom: 1.5rem;
        border-bottom: 2px solid #f0f2f5;
        position: relative;
    }

    .selection-header:after {
        content: '';
        position: absolute;
        bottom: -2px;
        left: 0;
        width: 80px;
        height: 2px;
        background: linear-gradient(90deg, #3b82f6, #60a5fa);
    }

    .selection-header h2 {
        color: #1e293b;
        font-size: 1.85rem;
        font-weight: 700;
        margin: 0;
        background: linear-gradient(90deg, #1e293b, #475569);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .tool-id {
        font-size: 1.1rem;
        color: #64748b;
        margin-top: 0.5rem;
        font-weight: 500;
    }

    .card {
        background: white;
        border-radius: 1rem;
        box-shadow: 0 0.35rem 1rem rgba(0, 0, 0, 0.08);
        margin-bottom: 2.25rem;
        border: 1px solid #e9ecef;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.12);
    }

    .card-header {
        background: linear-gradient(to right, #f8f9fc, #ffffff);
        padding: 1.35rem;
        border-bottom: 1px solid #e9ecef;
        border-radius: 1rem 1rem 0 0;
        position: relative;
    }

    .card-header:before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 5px;
        height: 100%;
        background: linear-gradient(to bottom, #3b82f6, #60a5fa);
        border-radius: 4px 0 0 4px;
    }

    .card-header h3 {
        margin: 0;
        color: #1e293b;
        font-size: 1.35rem;
        font-weight: 600;
        padding-left: 10px;
    }

    .card-body {
        padding: 1.75rem;
    }

    .table-container {
        max-height: 500px;
        overflow-y: auto;
        border: 1px solid #e2e8f0;
        border-radius: 0.75rem;
        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
        scrollbar-width: thin;
        scrollbar-color: #cbd5e1 #f1f5f9;
    }

    .table-container::-webkit-scrollbar {
        width: 8px;
    }

    .table-container::-webkit-scrollbar-track {
        background: #f1f5f9;
        border-radius: 4px;
    }

    .table-container::-webkit-scrollbar-thumb {
        background: #cbd5e1;
        border-radius: 4px;
    }

    .table-container::-webkit-scrollbar-thumb:hover {
        background: #94a3b8;
    }

    .measures-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
    }

    .measures-table th,
    .measures-table td {
        padding: 1.15rem;
        text-align: left;
        border-bottom: 1px solid #e9ecef;
    }

    .measures-table th {
        background: #f8fafc;
        font-weight: 600;
        color: #334155;
        position: sticky;
        top: 0;
        z-index: 10;
        box-shadow: 0 1px 0 #e2e8f0;
    }

    .measures-table tbody tr {
        cursor: pointer;
        transition: all 0.25s ease;
    }

    .measures-table tbody tr:hover {
        background: #f1f5f9;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
    }

    .measures-table tbody tr.selected {
        background: #eff6ff;
        border-left: 4px solid #3b82f6;
    }

    .measures-table tbody tr.selected td:first-child {
        position: relative;
    }

    .measures-table tbody tr.selected td:first-child:before {
        content: '';
        position: absolute;
        left: -4px;
        top: 0;
        height: 100%;
        width: 4px;
        background: #3b82f6;
    }

    .search-container {
        position: relative;
        margin-bottom: 2.5rem;
        max-width: 650px;
        margin-left: auto;
        margin-right: auto;
    }

    .search-box {
        position: relative;
        background: #fff;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        transition: all 0.3s ease;
    }

    .search-box:hover {
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.12);
        transform: translateY(-2px);
    }

    .search-input {
        width: 100%;
        padding: 1.15rem 1.15rem 1.15rem 3.5rem;
        border: 2px solid transparent;
        border-radius: 16px;
        font-size: 1.05rem;
        color: #1e293b;
        transition: all 0.3s ease;
        background: transparent;
    }

    .search-input::placeholder {
        color: #94a3b8;
        font-weight: 400;
    }

    .search-input:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.2);
    }

    .search-icon {
        position: absolute;
        left: 1.35rem;
        top: 50%;
        transform: translateY(-50%);
        color: #94a3b8;
        font-size: 1.15rem;
        pointer-events: none;
        transition: color 0.2s ease;
    }

    .search-input:focus + .search-icon {
        color: #3b82f6;
    }

    .search-stats {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-top: 0.85rem;
        padding: 0 0.75rem;
        font-size: 0.9rem;
        color: #64748b;
    }

    .search-stats .badge {
        background: #f1f5f9;
        color: #475569;
        padding: 0.35rem 0.85rem;
        border-radius: 9999px;
        font-weight: 500;
        transition: all 0.2s ease;
    }

    .search-stats .badge.has-results {
        background: #dbeafe;
        color: #1e40af;
    }

    .action-buttons {
        display: flex;
        justify-content: center;
        gap: 1.5rem;
        margin-top: 2.5rem;
    }

    .btn {
        padding: 0.85rem 2.25rem;
        font-size: 1rem;
        font-weight: 600;
        border-radius: 0.5rem;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
        position: relative;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .btn:after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 120%;
        height: 0;
        padding-bottom: 120%;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.2);
        transform: translate(-50%, -50%) scale(0);
        opacity: 0;
        transition: transform 0.5s, opacity 0.3s;
    }

    .btn:active:after {
        transform: translate(-50%, -50%) scale(1);
        opacity: 1;
        transition: 0s;
    }

    .btn i {
        margin-right: 0.75rem;
    }

    .btn-back {
        background-color: #f1f5f9;
        color: #475569;
        border: 1px solid #e2e8f0;
    }

    .btn-back:hover {
        background-color: #e2e8f0;
        color: #334155;
        transform: translateY(-3px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    }

    .btn-primary {
        background: linear-gradient(135deg, #3b82f6, #2563eb);
        color: white;
        box-shadow: 0 4px 12px rgba(37, 99, 235, 0.25);
    }

    .btn-primary:hover {
        background: linear-gradient(135deg, #2563eb, #1d4ed8);
        transform: translateY(-3px);
        box-shadow: 0 6px 15px rgba(37, 99, 235, 0.35);
    }

    .btn-disabled {
        background-color: #cbd5e1;
        color: #64748b;
        cursor: not-allowed;
        opacity: 0.8;
        box-shadow: none;
    }

    .btn-disabled:hover {
        transform: none;
        box-shadow: none;
    }
    
    /* Empty state styling */
    .empty-state {
        text-align: center;
        padding: 3rem;
        color: #64748b;
    }
    
    .empty-state i {
        font-size: 3rem;
        color: #cbd5e1;
        margin-bottom: 1rem;
    }
    
    .empty-state p {
        font-size: 1.1rem;
        margin: 0;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
        .selection-container {
            padding: 1.5rem;
            margin: 1rem;
            width: auto;
        }
        
        .search-input {
            padding: 1rem 1rem 1rem 3rem;
            font-size: 1rem;
        }
        
        .action-buttons {
            flex-direction: column;
            gap: 1rem;
        }
        
        .btn {
            width: 100%;
        }
        
        .measures-table th, 
        .measures-table td {
            padding: 0.85rem;
        }
    }
</style>
{% endblock %}

{% block body %}
    {% include 'navbar.html.twig' %}

    <div class="container">
        <div class="selection-container">
            <div class="selection-header">
                <div>
                    <h2>Select Measure for {{ action|upper }} Operation</h2>
                    <div class="tool-id">Tool: {{ tool.id }}</div>
                </div>
            </div>

            <!-- Tool Information Card -->
            {# <div class="card">
                <div class="card-header">
                    <h3>Tool Information</h3>
                </div>
                <div class="card-body">
                    <div class="data-grid">
                        <div class="data-item">
                            <h4>Description</h4>
                            <p>{{ tool.description.value }}</p>
                        </div>
                        <div class="data-item">
                            <h4>Manufacturer</h4>
                            <p>{{ tool.manufacturer.value }}</p>
                        </div>
                    </div>
                </div>
            </div> #}

            <!-- Measures Selection Card -->
            <div class="card">
                <div class="card-header">
                    <h3>Select Measure</h3>
                </div>
                <div class="card-body">
                    <div class="search-container">
                        <div class="search-box">
                            <i class="fas fa-search search-icon"></i>
                            <input type="text" 
                                   id="searchMeasure" 
                                   class="search-input" 
                                   placeholder="Search measures by section, height, or width..."
                                   autocomplete="off">
                        </div>
                        <div class="search-stats">
                            <span class="search-text">Type to start searching...</span>
                            <span class="badge" id="measureCount">{{ measures|length }} measures</span>
                        </div>
                    </div>

                    <div class="table-container">
                        <table class="measures-table" id="measuresTable">
                            <thead>
                                <tr>
                                    <th>Section</th>
                                    <th>Crimping Height</th>
                                    <th>Insulation Height</th>
                                    <th>Crimping Width</th>
                                    <th>Insulation Width</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for measure in measures %}
                                    <tr data-measure-id="{{ measure.id }}" onclick="selectMeasure(this, {{ measure.id }})">
                                        <td>{{ measure.section }}</td>
                                        <td>{{ measure.crimpingHeight }}</td>
                                        <td>{{ measure.insulationHeight }}</td>
                                        <td>{{ measure.crimpingWidth }}</td>
                                        <td>{{ measure.insulationWidth }}</td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="action-buttons">
                <button type="button" class="btn btn-back" onclick="window.location.href='{{ path('app_tool_details', {'id': tool.id}) }}'">
                    <i class="fas fa-arrow-left"></i>Back
                </button>
                <button type="button" class="btn btn-primary btn-disabled" id="continueBtn" disabled>
                    <i class="fas fa-arrow-right"></i>Continue
                </button>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchMeasure');
    const measuresTable = document.getElementById('measuresTable');
    const measureCount = document.getElementById('measureCount');
    const searchText = document.querySelector('.search-text');
    const continueBtn = document.getElementById('continueBtn');
    let selectedMeasureId = null;

    // Search functionality
    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase().trim();
        const tbody = measuresTable.querySelector('tbody');
        const rows = tbody.getElementsByTagName('tr');
        let visibleCount = 0;

        for (let row of rows) {
            const cells = row.getElementsByTagName('td');
            let found = false;

            for (let cell of cells) {
                const text = cell.textContent.toLowerCase();
                if (text.includes(searchTerm)) {
                    found = true;
                    break;
                }
            }

            if (found) {
                row.style.display = '';
                visibleCount++;
            } else {
                row.style.display = 'none';
            }
        }

        // Update count badge and search text
        measureCount.textContent = `${visibleCount} measures`;
        measureCount.className = `badge ${visibleCount > 0 ? 'has-results' : ''}`;
        
        if (searchTerm === '') {
            searchText.textContent = 'Type to start searching...';
        } else if (visibleCount === 0) {
            searchText.textContent = `No results found for "${searchTerm}"`;
        } else {
            searchText.textContent = `Found ${visibleCount} matching measures`;
        }
    });

    // Function to select a measure
    window.selectMeasure = function(row, measureId) {
        // Remove selected class from all rows
        const rows = measuresTable.getElementsByTagName('tr');
        for (let r of rows) {
            r.classList.remove('selected');
        }

        // Add selected class to clicked row
        row.classList.add('selected');
        selectedMeasureId = measureId;
        
        // Enable continue button
        continueBtn.classList.remove('btn-disabled');
        continueBtn.disabled = false;
    };
    
    // Continue button handler
    continueBtn.addEventListener('click', function() {
        if (selectedMeasureId) {
            // Navigate to the form page to input sample measurements
            const withCahier = '{{ withCahier }}';
            const url = '{{ path('app_io_form', {'toolId': tool.id, 'action': action, 'measureId': '__MEASURE_ID__'}) }}'.replace('__MEASURE_ID__', selectedMeasureId);
            window.location.href = url + `?withCahier=${withCahier}`;
        }
    });
});
</script>
{% endblock %} 