{% extends 'base.html.twig' %}

{% block title %}{{ action|upper }} Operation - Tool {{ tool.id }}{% endblock %}

{% block stylesheets %}
<style>
    body {
        padding-top: 70px;
        background-color: #f8f9fc;
        font-family: 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    }

    .form-container {
        max-width: 900px;
        margin: 2rem auto;
        padding: 2.5rem;
        background-color: white;
        border-radius: 1.25rem;
        box-shadow: 0 0.75rem 1.5rem rgba(18, 38, 63, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .form-container:hover {
        transform: translateY(-5px);
        box-shadow: 0 1rem 2rem rgba(18, 38, 63, 0.12);
    }

    .form-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 2.5rem;
        padding-bottom: 1.5rem;
        border-bottom: 2px solid #f0f2f5;
        position: relative;
    }

    .form-header:after {
        content: '';
        position: absolute;
        bottom: -2px;
        left: 0;
        width: 80px;
        height: 2px;
        background: linear-gradient(90deg, #3b82f6, #60a5fa);
    }

    .form-header h2 {
        color: #1e293b;
        font-size: 1.85rem;
        font-weight: 700;
        margin: 0;
        background: linear-gradient(90deg, #1e293b, #475569);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .tool-id {
        font-size: 1.1rem;
        color: #64748b;
        margin-top: 0.5rem;
        font-weight: 500;
    }

    .card {
        background: white;
        border-radius: 1rem;
        box-shadow: 0 0.35rem 1rem rgba(0, 0, 0, 0.08);
        margin-bottom: 2.25rem;
        border: 1px solid #e9ecef;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.12);
    }

    .card-header {
        background: linear-gradient(to right, #f8f9fc, #ffffff);
        padding: 1.35rem;
        border-bottom: 1px solid #e9ecef;
        border-radius: 1rem 1rem 0 0;
        position: relative;
    }

    .card-header:before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 5px;
        height: 100%;
        background: linear-gradient(to bottom, #3b82f6, #60a5fa);
        border-radius: 4px 0 0 4px;
    }

    .card-header h3 {
        margin: 0;
        color: #1e293b;
        font-size: 1.35rem;
        font-weight: 600;
        padding-left: 10px;
    }

    .card-body {
        padding: 1.75rem;
    }

    .data-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .data-item {
        background-color: #f8fafc;
        padding: 1.25rem;
        border-radius: 0.75rem;
        border: 1px solid #e2e8f0;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .data-item:hover {
        border-color: #cbd5e1;
        box-shadow: 0 0.25rem 0.75rem rgba(0, 0, 0, 0.05);
        transform: translateY(-3px);
    }

    .data-item:after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 3px;
        background: linear-gradient(to right, #3b82f6, #60a5fa);
        transform: scaleX(0);
        transform-origin: left;
        transition: transform 0.3s ease;
    }

    .data-item:hover:after {
        transform: scaleX(1);
    }

    .data-item h4 {
        font-size: 1rem;
        color: #64748b;
        margin-bottom: 0.75rem;
        font-weight: 500;
    }

    .data-item p {
        margin: 0;
        color: #1e293b;
        font-weight: 600;
        font-size: 1.1rem;
    }

    .form-group {
        margin-bottom: 1.75rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.75rem;
        font-weight: 600;
        color: #334155;
        font-size: 0.95rem;
        transition: color 0.2s ease;
    }

    .form-control {
        width: 100%;
        padding: 0.85rem 1rem;
        border: 1.5px solid #e2e8f0;
        border-radius: 0.5rem;
        font-size: 1rem;
        transition: all 0.3s ease;
        background-color: #f8fafc;
        color: #1e293b;
    }

    .form-control:hover {
        border-color: #cbd5e1;
    }

    .form-control:focus {
        border-color: #3b82f6;
        outline: none;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25);
        background-color: #fff;
    }

    .form-group:focus-within label {
        color: #3b82f6;
    }

    .tolerance-info {
        font-size: 0.85rem;
        color: #64748b;
        margin-top: 0.5rem;
        display: flex;
        align-items: center;
    }

    .tolerance-info:before {
        content: '\f05a';
        font-family: 'Font Awesome 5 Free';
        font-weight: 900;
        margin-right: 0.5rem;
        color: #94a3b8;
    }

    .action-buttons {
        display: flex;
        justify-content: center;
        gap: 1.5rem;
        margin-top: 2.5rem;
    }

    .btn {
        padding: 0.85rem 2.25rem;
        font-size: 1rem;
        font-weight: 600;
        border-radius: 0.5rem;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
        position: relative;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .btn:after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 120%;
        height: 0;
        padding-bottom: 120%;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.2);
        transform: translate(-50%, -50%) scale(0);
        opacity: 0;
        transition: transform 0.5s, opacity 0.3s;
    }

    .btn:active:after {
        transform: translate(-50%, -50%) scale(1);
        opacity: 1;
        transition: 0s;
    }

    .btn i {
        margin-right: 0.75rem;
    }

    .btn-back {
        background-color: #f1f5f9;
        color: #475569;
        border: 1px solid #e2e8f0;
    }

    .btn-back:hover {
        background-color: #e2e8f0;
        color: #334155;
        transform: translateY(-3px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    }

    .btn-primary {
        background: linear-gradient(135deg, #3b82f6, #2563eb);
        color: white;
        box-shadow: 0 4px 12px rgba(37, 99, 235, 0.25);
    }

    .btn-primary:hover {
        background: linear-gradient(135deg, #2563eb, #1d4ed8);
        transform: translateY(-3px);
        box-shadow: 0 6px 15px rgba(37, 99, 235, 0.35);
    }

    .btn-secondary {
        background: linear-gradient(135deg, #64748b, #475569);
        color: white;
        box-shadow: 0 4px 12px rgba(71, 85, 105, 0.25);
    }

    .btn-secondary:hover {
        background: linear-gradient(135deg, #475569, #334155);
        transform: translateY(-3px);
        box-shadow: 0 6px 15px rgba(71, 85, 105, 0.35);
    }

    .error-message {
        color: #ef4444;
        font-size: 0.9rem;
        margin-top: 0.5rem;
        display: none;
        animation: fadeIn 0.3s ease;
        padding-left: 0.5rem;
        border-left: 2px solid #ef4444;
    }

    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(-5px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .form-control.is-invalid {
        border-color: #ef4444;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23ef4444'%3E%3Cpath d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 1.25rem;
        padding-right: 2.5rem;
    }
    
    .form-control.is-warning {
        border-color: #f59e0b;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23f59e0b'%3E%3Cpath d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 15h2v-2h-2v2zm0-4h2V7h-2v6z'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 1.25rem;
        padding-right: 2.5rem;
    }
    
    .warning-message {
        color: #b45309;
        font-size: 0.9rem;
        margin-top: 0.5rem;
        display: block;
        animation: fadeIn 0.3s ease;
        padding-left: 0.5rem;
        border-left: 2px solid #f59e0b;
    }

    .alert {
        padding: 1.25rem 1.5rem;
        margin-bottom: 1.5rem;
        border-radius: 0.75rem;
        font-weight: 500;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        position: relative;
        animation: alertFadeIn 0.5s cubic-bezier(0.16, 1, 0.3, 1);
        display: flex;
        align-items: center;
        border-left: 5px solid;
    }

    .alert i {
        margin-right: 1rem;
        font-size: 1.25rem;
    }

    @keyframes alertFadeIn {
        from { opacity: 0; transform: translateY(-20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .alert-danger {
        background-color: #fef2f2;
        border-left-color: #ef4444;
        color: #991b1b;
    }

    .alert-success {
        background-color: #ecfdf5;
        border-left-color: #10b981;
        color: #065f46;
    }
    
    .alert-warning {
        background-color: #fffbeb;
        border-left-color: #f59e0b;
        color: #92400e;
    }
    
    .alert-info {
        background-color: #eff6ff;
        border-left-color: #3b82f6;
        color: #1e40af;
    }
    
    .notification-large {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 2000;
        min-width: 350px;
        text-align: center;
        padding: 2rem;
        font-size: 1.2rem;
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        border-width: 0;
        border-left-width: 5px;
        border-style: solid;
        animation: zoomInNotification 0.5s cubic-bezier(0.16, 1, 0.3, 1);
    }
    
    @keyframes zoomInNotification {
        from { opacity: 0; transform: translate(-50%, -50%) scale(0.95); }
        to { opacity: 1; transform: translate(-50%, -50%) scale(1); }
    }

    .standard-value {
        font-weight: 700;
        color: #3b82f6;
    }

    .tolerance-range {
        font-style: italic;
        color: #64748b;
        margin-left: 0.25rem;
    }
    
    .radio-group {
        display: flex;
        gap: 1.5rem;
        margin-top: 0.75rem;
    }

    .radio-option {
        display: flex;
        align-items: center;
        cursor: pointer;
        padding: 0.75rem 1.25rem;
        background-color: #f8fafc;
        border: 1.5px solid #e2e8f0;
        border-radius: 0.5rem;
        transition: all 0.2s ease;
    }

    .radio-option:hover {
        background-color: #f1f5f9;
        border-color: #cbd5e1;
    }

    .radio-option input {
        margin-right: 0.75rem;
        cursor: pointer;
        width: 18px;
        height: 18px;
    }

    .radio-option input:checked + span {
        color: #3b82f6;
        font-weight: 600;
    }

    .radio-option input:checked {
        accent-color: #3b82f6;
    }
    
    /* Modal styles */
    .modal {
        display: none;
        position: fixed;
        z-index: 1050;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(15, 23, 42, 0.6);
        backdrop-filter: blur(4px);
    }
    
    .modal.show {
        display: block;
        animation: fadeIn 0.3s cubic-bezier(0.16, 1, 0.3, 1);
    }
    
    .modal-dialog {
        position: relative;
        width: auto;
        margin: 1.75rem auto;
        max-width: 600px;
        pointer-events: none;
        transform: translateY(-20px);
        transition: transform 0.3s ease;
    }
    
    .modal.show .modal-dialog {
        transform: translateY(0);
    }
    
    .modal-content {
        position: relative;
        display: flex;
        flex-direction: column;
        width: 100%;
        pointer-events: auto;
        background-color: #fff;
        background-clip: padding-box;
        border: none;
        border-radius: 1rem;
        outline: 0;
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        overflow: hidden;
    }
    
    .modal-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1.5rem;
        background: linear-gradient(135deg, #3b82f6, #2563eb);
        color: white;
    }
    
    .modal-title {
        margin-bottom: 0;
        line-height: 1.5;
        font-size: 1.25rem;
        font-weight: 600;
        color: white;
    }
    
    .close {
        float: right;
        font-size: 1.5rem;
        font-weight: 700;
        line-height: 1;
        color: white;
        text-shadow: none;
        opacity: 0.75;
        padding: 0;
        background-color: transparent;
        border: 0;
        appearance: none;
        transition: all 0.2s ease;
    }
    
    .close:hover {
        color: white;
        text-decoration: none;
        opacity: 1;
        cursor: pointer;
        transform: rotate(90deg);
    }
    
    .modal-body {
        position: relative;
        flex: 1 1 auto;
        padding: 1.75rem;
    }
    
    .modal-footer {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        padding: 1.5rem;
        border-top: 1px solid #e2e8f0;
        gap: 1rem;
    }
    
    .modal-footer > * {
        margin: 0;
    }
    
    .warning-item {
        margin-bottom: 0.75rem;
        padding-left: 1.75rem;
        position: relative;
        color: #92400e;
    }
    
    .warning-item:before {
        content: "\f071";
        font-family: "Font Awesome 5 Free";
        font-weight: 900;
        position: absolute;
        left: 0;
        color: #f59e0b;
    }
    
    /* Confirmation modal styles */
    .confirmation-details {
        background-color: #f8fafc;
        border-radius: 0.75rem;
        padding: 1.25rem;
        margin-bottom: 1.25rem;
        border: 1px solid #e2e8f0;
    }
    
    .confirmation-details h6 {
        color: #334155;
        font-weight: 600;
        margin-bottom: 1rem;
        font-size: 1.05rem;
    }
    
    .confirmation-measures {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
    }
    
    .measure-item {
        background-color: white;
        padding: 1rem;
        border-radius: 0.75rem;
        border: 1px solid #e2e8f0;
        display: flex;
        flex-direction: column;
        transition: all 0.2s ease;
    }
    
    .measure-item:hover {
        border-color: #cbd5e1;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        transform: translateY(-2px);
    }
    
    .measure-label {
        color: #64748b;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
    }
    
    .measure-value {
        font-weight: 600;
        color: #1e293b;
        font-family: 'SF Mono', SFMono-Regular, Menlo, Monaco, Consolas, monospace;
    }
    
    .measure-value.warning {
        color: #b45309;
        position: relative;
        padding-left: 1.5rem;
    }
    
    .measure-value.warning:before {
        content: "\f071";
        font-family: "Font Awesome 5 Free";
        font-weight: 900;
        position: absolute;
        left: 0;
        font-size: 0.875rem;
        color: #f59e0b;
    }
    
    .mt-3 {
        margin-top: 1.5rem;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
        .form-container {
            padding: 1.5rem;
            margin: 1rem;
            width: auto;
        }
        
        .data-grid {
            grid-template-columns: 1fr;
        }
        
        .radio-group {
            flex-direction: column;
            gap: 0.75rem;
        }
        
        .action-buttons {
            flex-direction: column;
            gap: 1rem;
        }
        
        .btn {
            width: 100%;
        }
        
        .modal-dialog {
            margin: 0.5rem;
        }
        
        .confirmation-measures {
            grid-template-columns: 1fr;
        }
    }
</style>
{% endblock %}

{% block body %}
    {% include 'navbar.html.twig' %}

    <div class="container">
        <div class="form-container">
            <div class="form-header">
                <div>
                    <h2>{{ action|upper }} Operation</h2>
                    <div class="tool-id">Tool: {{ tool.id }}</div>
                </div>
            </div>

            <div id="alertContainer" style="position: fixed; top: 0; left: 0; right: 0; z-index: 9999;"></div>

            <!-- Tool Information Card -->
            <div class="card">
                <div class="card-header">
                    <h3>Tool Information</h3>
                </div>
                <div class="card-body">
                    <div class="data-grid">
                        <div class="data-item">
                            <h4>Description</h4>
                            <p>{{ tool.description.value }}</p>
                        </div>
                        <div class="data-item">
                            <h4>Manufacturer</h4>
                            <p>{{ tool.manufacturer.value }}</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Measure Information Card - Only shown for IN operations -->
            {% if action|upper == 'IN' and measure is defined and measure is not null %}
            <div class="card" id="measureCard">
                <div class="card-header">
                    <h3>Selected Measure Standards</h3>
                </div>
                <div class="card-body">
                    <div class="data-grid">
                        <div class="data-item">
                            <h4>Section</h4>
                            <p>{{ measure.section }}</p>
                        </div>
                        <div class="data-item">
                            <h4>Crimping Height</h4>
                            <p>{{ measure.crimpingHeight }}</p>
                        </div>
                        <div class="data-item">
                            <h4>Insulation Height</h4>
                            <p>{{ measure.insulationHeight }}</p>
                        </div>
                        <div class="data-item">
                            <h4>Crimping Width</h4>
                            <p>{{ measure.crimpingWidth }}</p>
                        </div>
                        <div class="data-item">
                            <h4>Insulation Width</h4>
                            <p>{{ measure.insulationWidth }}</p>
                        </div>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Form Card -->
            <div class="card">
                <div class="card-header">
                    <h3>{% if action|upper == 'IN' %}Enter Measurements{% else %}Exit Operation{% endif %}</h3>
                </div>
                <div class="card-body">
                    <form id="ioForm">
                        <!-- With Cahier Radio Buttons - Always shown -->
                        <div class="form-group">
                            <label>With Cahier</label>
                            <div class="radio-group">
                                <label class="radio-option">
                                    <input type="radio" name="withCahier" value="yes" id="withCahierYes" {% if withCahier == 'yes' %}checked{% endif %}> 
                                    <span>Yes</span>
                                </label>
                                <label class="radio-option">
                                    <input type="radio" name="withCahier" value="no" id="withCahierNo" {% if withCahier == 'no' or withCahier is not defined %}checked{% endif %}> 
                                    <span>No</span>
                                </label>
                            </div>
                        </div>
                        
                        <!-- Measurement Fields - Only shown for IN operations -->
                        {% if action|upper == 'IN' and measure is defined and measure is not null %}
                        <div id="measurementFields">
                            <div class="data-grid">
                                <div class="form-group">
                                    <label for="section">Section</label>
                                    <input type="number" step="0.001" class="form-control" id="section" name="section" required>
                                    <div class="tolerance-info">
                                        Standard: <span class="standard-value">{{ measure.section }}</span>
                                        <span class="tolerance-range">(±0.1)</span>
                                    </div>
                                    <div class="error-message" id="sectionError"></div>
                                </div>
                                
                                <div class="form-group">
                                    <label for="crimpingHeight">Crimping Height</label>
                                    <input type="number" step="0.001" class="form-control" id="crimpingHeight" name="crimpingHeight" required>
                                    <div class="tolerance-info">
                                        Standard: <span class="standard-value">{{ measure.crimpingHeight }}</span>
                                        <span class="tolerance-range">(±0.1)</span>
                                    </div>
                                    <div class="error-message" id="crimpingHeightError"></div>
                                </div>
                                
                                <div class="form-group">
                                    <label for="insulationHeight">Insulation Height</label>
                                    <input type="number" step="0.001" class="form-control" id="insulationHeight" name="insulationHeight" required>
                                    <div class="tolerance-info">
                                        Standard: <span class="standard-value">{{ measure.insulationHeight }}</span>
                                        <span class="tolerance-range">(±0.1)</span>
                                    </div>
                                    <div class="error-message" id="insulationHeightError"></div>
                                </div>
                                
                                <div class="form-group">
                                    <label for="crimpingWidth">Crimping Width</label>
                                    <input type="number" step="0.001" class="form-control" id="crimpingWidth" name="crimpingWidth" required>
                                    <div class="tolerance-info">
                                        Standard: <span class="standard-value">{{ measure.crimpingWidth }}</span>
                                        <span class="tolerance-range">(±0.1)</span>
                                    </div>
                                    <div class="error-message" id="crimpingWidthError"></div>
                                </div>
                                
                                <div class="form-group">
                                    <label for="insulationWidth">Insulation Width</label>
                                    <input type="number" step="0.001" class="form-control" id="insulationWidth" name="insulationWidth" required>
                                    <div class="tolerance-info">
                                        Standard: <span class="standard-value">{{ measure.insulationWidth }}</span>
                                        <span class="tolerance-range">(±0.1)</span>
                                    </div>
                                    <div class="error-message" id="insulationWidthError"></div>
                                </div>
                            </div>
                        </div>
                        {% endif %}

                        <div class="action-buttons">
                            <button type="button" class="btn btn-back" onclick="window.location.href='{% if action|upper == 'IN' %}{{ path('app_io_form', {'toolId': tool.id, 'action': 'in', 'measureId': 0}) }}{% else %}{{ path('app_tool_details', {'id': tool.id}) }}{% endif %}'">
                                <i class="fas fa-arrow-left"></i>Back
                            </button>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save"></i>Submit
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Confirmation Modal - Only shown for IN operations -->
    {% if action|upper == 'IN' and measure is defined and measure is not null %}
    <div class="modal" id="confirmationModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm {{ action|upper }} Operation</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="closeModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to save these measurements?</p>
                    <div class="confirmation-measures">
                        <div class="measure-item">
                            <span class="measure-label">Section:</span>
                            <span class="measure-value" id="confirmSection"></span>
                        </div>
                        <div class="measure-item">
                            <span class="measure-label">Crimping Height:</span>
                            <span class="measure-value" id="confirmCrimpingHeight"></span>
                        </div>
                        <div class="measure-item">
                            <span class="measure-label">Insulation Height:</span>
                            <span class="measure-value" id="confirmInsulationHeight"></span>
                        </div>
                        <div class="measure-item">
                            <span class="measure-label">Crimping Width:</span>
                            <span class="measure-value" id="confirmCrimpingWidth"></span>
                        </div>
                        <div class="measure-item">
                            <span class="measure-label">Insulation Width:</span>
                            <span class="measure-value" id="confirmInsulationWidth"></span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="closeModal()">Cancel</button>
                    <button type="button" class="btn btn-primary" id="confirmSubmit">Save</button>
                </div>
            </div>
        </div>
    </div>
    {% endif %}
{% endblock %}

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const ioForm = document.getElementById('ioForm');
    const action = '{{ action|upper }}';
    const withCahierYes = document.getElementById('withCahierYes');
    const withCahierNo = document.getElementById('withCahierNo');
    
    {% if action|upper == 'IN' and measure is defined and measure is not null %}
    // For IN operations with measurements
    const tolerance = 0.1;
    const measure = {
        section: {{ measure.section }},
        crimpingHeight: {{ measure.crimpingHeight }},
        insulationHeight: {{ measure.insulationHeight }},
        crimpingWidth: {{ measure.crimpingWidth }},
        insulationWidth: {{ measure.insulationWidth }}
    };

    // Function to validate if a value is within tolerance
    function isWithinTolerance(value, standard) {
        const min = standard - tolerance;
        const max = standard + tolerance;
        return value >= min && value <= max;
    }

    // Function to validate a field
    function validateField(field, standard) {
        const value = parseFloat(field.value);
        const errorElement = document.getElementById(field.id + 'Error');
        
        if (isNaN(value)) {
            field.classList.add('is-invalid');
            errorElement.textContent = 'Please enter a valid number';
            return false;
        }
        
        if (!isWithinTolerance(value, standard)) {
            field.classList.add('is-invalid');
            errorElement.textContent = `Value must be between ${(standard - tolerance).toFixed(3)} and ${(standard + tolerance).toFixed(3)}`;
            return false;
        }
        
        field.classList.remove('is-invalid');
        errorElement.textContent = '';
        return true;
    }

    // Add input event listeners for real-time validation
    document.getElementById('section').addEventListener('input', function() {
        validateField(this, measure.section);
    });
    
    document.getElementById('crimpingHeight').addEventListener('input', function() {
        validateField(this, measure.crimpingHeight);
    });
    
    document.getElementById('insulationHeight').addEventListener('input', function() {
        validateField(this, measure.insulationHeight);
    });
    
    document.getElementById('crimpingWidth').addEventListener('input', function() {
        validateField(this, measure.crimpingWidth);
    });
    
    document.getElementById('insulationWidth').addEventListener('input', function() {
        validateField(this, measure.insulationWidth);
    });
    {% endif %}

    // Form submission
    ioForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Prepare base data
        const formData = {
            toolId: '{{ tool.id }}',
            action: action,
            with_cahier: withCahierYes.checked ? 'yes' : 'no'
        };
        
        {% if action|upper == 'IN' and measure is defined and measure is not null %}
        // For IN operations, validate and add measurement fields
        const fields = ['section', 'crimpingHeight', 'insulationHeight', 'crimpingWidth', 'insulationWidth'];
        let hasInvalidInput = false;
        let hasEmptyFields = false;
        
        for (const fieldId of fields) {
            const field = document.getElementById(fieldId);
            const errorElement = document.getElementById(fieldId + 'Error');
            
            // Reset previous states
            errorElement.style.display = 'none';
            field.classList.remove('is-invalid');
            
            // Check if field is empty
            if (field.value.trim() === '') {
                field.classList.add('is-invalid');
                errorElement.textContent = 'This field is required';
                errorElement.style.display = 'block';
                hasEmptyFields = true;
                continue;
            }
            
            const value = parseFloat(field.value);
            
            // Check if value is a valid number
            if (isNaN(value) || value <= 0) {
                field.classList.add('is-invalid');
                errorElement.textContent = 'Please enter a valid positive number';
                errorElement.style.display = 'block';
                hasInvalidInput = true;
            }
        }
        
        if (hasEmptyFields || hasInvalidInput) {
            return;
        }
        
        // Add measurement data
        formData.measureId = {{ measure is defined and measure is not null ? measure.id : 0 }};
        formData.section = parseFloat(document.getElementById('section').value);
        formData.crimpingHeight = parseFloat(document.getElementById('crimpingHeight').value);
        formData.insulationHeight = parseFloat(document.getElementById('insulationHeight').value);
        formData.crimpingWidth = parseFloat(document.getElementById('crimpingWidth').value);
        formData.insulationWidth = parseFloat(document.getElementById('insulationWidth').value);
        
        // Show modal confirmation dialog for IN operations
        const modal = document.getElementById('confirmationModal');
        
        // Set values in confirmation dialog
        document.getElementById('confirmSection').textContent = formData.section.toFixed(3);
        document.getElementById('confirmCrimpingHeight').textContent = formData.crimpingHeight.toFixed(3);
        document.getElementById('confirmInsulationHeight').textContent = formData.insulationHeight.toFixed(3);
        document.getElementById('confirmCrimpingWidth').textContent = formData.crimpingWidth.toFixed(3);
        document.getElementById('confirmInsulationWidth').textContent = formData.insulationWidth.toFixed(3);
        
        // Show the modal
        modal.classList.add('show');
        
        // Handle the confirmation
        document.getElementById('confirmSubmit').onclick = function() {
            modal.classList.remove('show');
            submitForm(formData);
        };
        {% else %}
        // For OUT operations, submit directly
        submitForm(formData);
        {% endif %}
    });
    
    // Function to close the modal
    window.closeModal = function() {
        const modal = document.getElementById('confirmationModal');
        if (modal) {
            modal.classList.remove('show');
        }
    };
    
    // Function to submit the form data
    function submitForm(formData) {
        // Submit data
        fetch('{{ path('app_io_submit') }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message
                const successMessage = document.createElement('div');
                successMessage.className = 'alert alert-success notification-large';
                
                // Add conformity class based on the status (only for IN operations)
                if (action === 'IN' && data.conformite === 'non conforme') {
                    successMessage.classList.add('alert-warning');
                }
                
                let messageContent = `
                    <i class="fas fa-check-circle me-2"></i>
                    ${data.message}
                `;
                
                // Add conformity status for IN operations
                if (action === 'IN' && data.conformite) {
                    messageContent += `
                        <div class="mt-2" style="font-size: 0.9em;">
                            <strong>Status de conformité:</strong> ${data.conformite}
                        </div>
                    `;
                }
                
                successMessage.innerHTML = messageContent;
                document.body.appendChild(successMessage);
                
                // Redirect after a short delay
                setTimeout(() => {
                    window.location.href = '{{ path('app_home') }}';
                }, 2000);
            } else {
                // Show error message
                const errorMessage = document.createElement('div');
                errorMessage.className = 'alert alert-danger notification-large';
                errorMessage.innerHTML = `
                    <i class="fas fa-exclamation-circle me-2"></i>
                    ${data.message}
                `;
                document.body.appendChild(errorMessage);
                
                // Remove error message after 3 seconds
                setTimeout(() => {
                    errorMessage.remove();
                }, 3000);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            // Show error message
            const errorMessage = document.createElement('div');
            errorMessage.className = 'alert alert-danger notification-large';
            errorMessage.innerHTML = `
                <i class="fas fa-exclamation-circle me-2"></i>
                An error occurred while processing your request
            `;
            document.body.appendChild(errorMessage);
            
            // Remove error message after 3 seconds
            setTimeout(() => {
                errorMessage.remove();
            }, 3000);
        });
    }
});
</script>
{% endblock %} 