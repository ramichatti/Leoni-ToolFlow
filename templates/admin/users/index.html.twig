{% extends 'base_back.html.twig' %}

{% block title %}User Management{% endblock %}

{% block stylesheets %}
    <style>
        .user-header {
            background-color: #f8f9fc;
            border-radius: 0.75rem;
            padding: 1.5rem;
            margin-bottom: 2.5rem;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }
        
        .user-header h1 {
            margin-bottom: 0.5rem;
            font-weight: 700;
            color: #5a5a5a;
        }
        
        .user-header p {
            color: #6c757d;
            margin-bottom: 0;
            font-size: 1rem;
            padding-top: 0.5rem;
            max-width: 80%;
        }
        
        .btn-add-user {
            padding: 0.5rem 1rem;
            font-weight: 600;
            border-radius: 0.5rem;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            transition: all 0.2s;
        }
        
        .btn-add-user:hover {
            transform: translateY(-2px);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
        }
        
        .btn-add-user i {
            margin-right: 0.5rem;
        }
        
        .table-responsive {
            border-radius: 0.75rem;
            overflow: hidden;
        }
        
        .table {
            margin-bottom: 0;
        }
        
        .table th {
            background-color: #f8f9fc;
            border-top: none;
            font-weight: 700;
            font-size: 0.85rem;
            text-transform: uppercase;
            color: #5a5a5a;
            letter-spacing: 0.05em;
            padding: 1rem;
            vertical-align: middle;
        }
        
        .table td {
            padding: 0.75rem 1rem;
            vertical-align: middle;
        }
        
        .table tr:hover {
            background-color: #f8f9fc;
        }
        
        /* Style pour les utilisateurs bloqués */
        .table tr.blocked-user {
            background-color: rgba(248, 215, 218, 0.3);
        }
        
        .table tr.blocked-user:hover {
            background-color: rgba(248, 215, 218, 0.5);
        }
        
        .table tr.blocked-user td {
            border-color: #f5c6cb;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            color: #5a5a5a;
            margin-right: 0.75rem;
        }
        
        /* Style pour les avatars des utilisateurs bloqués */
        .blocked-user .user-avatar {
            background-color: #f8d7da;
            color: #721c24;
        }
        
        .user-info-list {
            display: flex;
            align-items: center;
        }
        
        .user-name {
            font-weight: 600;
            color: #5a5a5a;
            margin-bottom: 0;
        }
        
        /* Style pour les noms des utilisateurs bloqués */
        .blocked-user .user-name {
            color: #721c24;
            text-decoration: line-through;
            opacity: 0.8;
        }
        
        .badge-role {
            font-size: 0.75rem;
            padding: 0.35rem 0.65rem;
            border-radius: 2rem;
            font-weight: 600;
        }
        
        .badge-role-user {
            background-color: #e9ecef;
            color: #5a5a5a;
        }
        
        .badge-role-admin {
            background-color: #cff4fc;
            color: #055160;
        }
        
        .badge-role-super-admin {
            background-color: #f8d7da;
            color: #842029;
        }
        
        .status-badge {
            padding: 0.5rem 1rem;
            font-size: 0.85rem;
            font-weight: 600;
            border-radius: 2rem;
            display: inline-block;
            width: 100%;
            text-align: center;
        }
        
        .btn-action {
            width: 32px;
            height: 32px;
            padding: 0;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.5rem;
            margin: 0 0.25rem;
            transition: all 0.2s;
        }
        
        .btn-action:hover {
            transform: translateY(-2px);
        }
        
        .btn-view {
            background-color: #e9ecef;
            color: #5a5a5a;
            border: none;
        }
        
        .btn-view:hover {
            background-color: #dee2e6;
            color: #343a40;
        }
        
        .btn-edit {
            background-color: #cff4fc;
            color: #055160;
            border: none;
        }
        
        .btn-edit:hover {
            background-color: #9eeaf9;
            color: #055160;
        }
        
        .btn-delete {
            background-color: #f8d7da;
            color: #842029;
            border: none;
        }
        
        .btn-delete:hover {
            background-color: #f5c2c7;
            color: #842029;
        }
        
        .btn-warning {
            background-color: #fff3cd;
            color: #664d03;
            border: none;
        }
        
        .btn-warning:hover {
            background-color: #ffecb5;
            color: #664d03;
        }
        
        .btn-success {
            background-color: #d1e7dd;
            color: #0f5132;
            border: none;
        }
        
        .btn-success:hover {
            background-color: #badbcc;
            color: #0f5132;
        }
        
        /* Styles pour les notifications AJAX */
        .ajax-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            z-index: 9999;
            opacity: 0;
            transform: translateY(-20px);
            transition: all 0.3s ease;
        }
        
        .ajax-notification.show {
            opacity: 1;
            transform: translateY(0);
        }
        
        .ajax-notification.success {
            background-color: #d1e7dd;
            color: #0f5132;
            border-left: 4px solid #0f5132;
        }
        
        .ajax-notification.error {
            background-color: #f8d7da;
            color: #842029;
            border-left: 4px solid #842029;
        }
        
        .ajax-notification.warning {
            background-color: #fff3cd;
            color: #664d03;
            border-left: 4px solid #664d03;
        }
        
        /* Style pour les boutons avec spinner */
        .btn-with-spinner {
            position: relative;
        }
        
        .btn-with-spinner .spinner-border {
            position: absolute;
            top: 50%;
            left: 50%;
            margin-top: -0.5rem;
            margin-left: -0.5rem;
            display: none;
        }
        
        .btn-with-spinner.loading .spinner-border {
            display: block;
        }
        
        .btn-with-spinner.loading i {
            visibility: hidden;
        }
        
        .empty-state {
            padding: 3rem;
            text-align: center;
        }
        
        .empty-state i {
            font-size: 3rem;
            color: #dee2e6;
            margin-bottom: 1rem;
        }
        
        .empty-state h5 {
            color: #6c757d;
            font-weight: 600;
        }
        
        .empty-state p {
            color: #adb5bd;
        }
        
        .alert {
            border-radius: 0.5rem;
            border: none;
        }
        
        .dataTables_wrapper .dataTables_length, 
        .dataTables_wrapper .dataTables_filter {
            margin-bottom: 1rem;
        }
        
        .dataTables_wrapper .dataTables_info, 
        .dataTables_wrapper .dataTables_paginate {
            margin-top: 1rem;
        }
        
        .dataTables_wrapper .dataTables_paginate .paginate_button {
            border-radius: 0.25rem;
        }
        
        /* Confirmation modal styles */
        .swal2-popup {
            font-size: 0.9rem;
            border-radius: 0.75rem;
        }
        
        .swal2-title {
            font-size: 1.5rem;
            font-weight: 700;
        }
        
        .swal2-content {
            font-size: 1rem;
        }
        
        .swal2-actions button {
            font-weight: 600;
            border-radius: 0.5rem;
            padding: 0.5rem 1.5rem;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }
        
        /* User Details Modal Styles */
        .modal-user-details .modal-content {
            border: none;
            border-radius: 1rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }
        
        .modal-user-details .modal-header {
            border-bottom: none;
            padding: 1.5rem 1.5rem 0.5rem;
            background-color: #f8f9fc;
        }
        
        .modal-user-details .modal-body {
            padding: 1rem 1.5rem 1.5rem;
        }
        
        .modal-user-details .modal-footer {
            border-top: none;
            padding: 1rem 1.5rem;
            background-color: #f8f9fc;
            justify-content: space-between;
        }
        
        .user-details-card {
            border: none;
            border-radius: 0.75rem;
            overflow: hidden;
        }
        
        .user-details-header {
            background-color: #f8f9fc;
            padding: 2rem;
            text-align: center;
            border-bottom: 1px solid #e3e6f0;
            position: relative;
        }
        
        .user-details-actions {
            position: absolute;
            top: 1rem;
            right: 1rem;
            display: flex;
        }
        
        .user-details-actions .btn {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-left: 0.5rem;
            transition: all 0.2s;
        }
        
        .user-details-actions .btn:hover {
            transform: translateY(-2px);
        }
        
        .user-details-actions .btn-edit {
            background-color: #cff4fc;
            color: #055160;
            border: none;
        }
        
        .user-details-actions .btn-delete {
            background-color: #f8d7da;
            color: #842029;
            border: none;
        }
        
        .user-details-avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background-color: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            font-size: 2rem;
            color: #5a5a5a;
            margin: 0 auto 1rem;
        }
        
        .user-details-name {
            font-size: 1.5rem;
            font-weight: 700;
            color: #5a5a5a;
            margin-bottom: 0.5rem;
        }
        
        .user-details-role {
            display: inline-block;
            margin-bottom: 0;
        }
        
        .user-details-info {
            padding: 1.5rem;
        }
        
        .user-details-item {
            margin-bottom: 1.25rem;
            display: flex;
            align-items: flex-start;
        }
        
        .user-details-item:last-child {
            margin-bottom: 0;
        }
        
        .user-details-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #f8f9fc;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            color: #5a5a5a;
        }
        
        .user-details-content {
            flex: 1;
        }
        
        .user-details-label {
            font-size: 0.85rem;
            font-weight: 600;
            color: #6c757d;
            margin-bottom: 0.25rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }
        
        .user-details-value {
            font-weight: 600;
            color: #5a5a5a;
            margin-bottom: 0;
        }
        
        .user-details-footer {
            background-color: #f8f9fc;
            padding: 1rem 1.5rem;
            border-top: 1px solid #e3e6f0;
            text-align: center;
        }
        
        .user-details-created {
            color: #6c757d;
            font-size: 0.85rem;
            margin-bottom: 0;
        }
        
        /* DataTable Search Styles */
        .dataTables_wrapper .dataTables_filter {
            float: right;
            text-align: right;
            margin-bottom: 1.5rem;
            position: relative;
        }
        
        .dataTables_wrapper .dataTables_filter label {
            font-weight: 600;
            color: #5a5a5a;
            display: flex;
            align-items: center;
        }
        
        .dataTables_wrapper .dataTables_filter input {
            margin-left: 0.75rem;
            border-radius: 0.5rem;
            border: 1px solid #dee2e6;
            padding: 0.5rem 1rem 0.5rem 2.5rem;
            font-size: 0.95rem;
            width: 250px;
            transition: all 0.2s ease;
            background-color: #f8f9fc;
        }
        
        .dataTables_wrapper .dataTables_filter input:focus {
            border-color: #adb5bd;
            box-shadow: 0 0 0 0.2rem rgba(173, 181, 189, 0.25);
            outline: 0;
            background-color: #fff;
        }
        
        .dataTables_wrapper .dataTables_filter::before {
            content: '\f002';
            font-family: 'Font Awesome 5 Free';
            font-weight: 900;
            position: absolute;
            right: 225px;
            top: 50%;
            transform: translateY(-50%);
            color: #adb5bd;
            z-index: 1;
        }
        
        .dataTables_wrapper .dataTables_length {
            float: left;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
        }
        
        .dataTables_wrapper .dataTables_length label {
            display: flex;
            align-items: center;
            font-weight: 600;
            color: #5a5a5a;
            margin-bottom: 0;
        }
        
        .dataTables_wrapper .dataTables_length select {
            margin: 0 0.5rem;
            border-radius: 0.5rem;
            border: 1px solid #dee2e6;
            padding: 0.5rem;
            background-color: #f8f9fc;
        }
        
        .dataTables_wrapper .dataTables_info {
            clear: both;
            float: left;
            padding-top: 1.25rem;
            color: #6c757d;
            font-size: 0.9rem;
        }
        
        .dataTables_wrapper .dataTables_paginate {
            float: right;
            text-align: right;
            padding-top: 1.25rem;
        }
        
        .dataTables_wrapper .dataTables_paginate .paginate_button {
            padding: 0.375rem 0.75rem;
            margin-left: 0.25rem;
            border-radius: 0.5rem;
        }
        
        .dataTables_wrapper .dataTables_paginate .paginate_button.current {
            background: #f8f9fc;
            border-color: #dee2e6;
            color: #5a5a5a !important;
            font-weight: 600;
        }
        
        .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
            background: #e9ecef;
            border-color: #dee2e6;
        }
        
        /* Add some spacing to the table */
        .card-body {
            padding: 1.5rem !important;
        }
        
        /* Add spacing between top controls and table */
        .top {
            margin-bottom: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container-fluid py-4">
        <!-- Page Header -->
        <div class="user-header d-sm-flex align-items-center justify-content-between">
            <div>
                <h1>User Management</h1>
                <p class="mt-2">Manage all registered users in the system</p>
                <br/>
            </div>
            <a href="{{ path('app_admin_users_new') }}" class="btn btn-primary btn-add-user">
                <i class="fas fa-plus"></i> Add New User
            </a>
        </div>
        
        <!-- Flash Messages -->
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label }} alert-dismissible fade show mb-4" role="alert">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            {% endfor %}
        {% endfor %}
        
        <!-- Users Table -->
        <div class="card shadow mb-4">
            <div class="card-body p-4">
                <div class="table-responsive">
                    <table class="table" id="usersTable" width="100%" cellspacing="0">
                        <thead>
                            <tr>
                                <th style="width: 10%">Id</th>
                                <th style="width: 20%">User</th>
                                <th style="width: 10%">Role</th>
                                <th style="width: 20%">Email</th>
                                <th style="width: 15%">Status</th>
                                <th style="width: 20%">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for user in users %}
                                <tr{% if user.isBlocked %} class="blocked-user"{% endif %}>
                                    <td>
                                        <code>{{ user.id }}</code>
                                    </td>
                                    <td>
                                        <div class="user-info-list">
                                            <div class="user-avatar">
                                                {{ user.firstName|slice(0, 1)|upper }}{{ user.lastName|slice(0, 1)|upper }}
                                            </div>
                                            <div>
                                                <p class="user-name">{{ user.firstName }} {{ user.lastName }}</p>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div>
                                            <p class="mb-0">{{ user.email }}</p>
                                        </div>
                                    </td>
                                    <td>
                                        {% if user.role.value == 'ROLE_MAINTENANCE' %}
                                            <span class="badge badge-role badge-role-user">Maintenance</span>
                                        {% elseif user.role.value == 'ROLE_ADMIN' %}
                                            <span class="badge badge-role badge-role-admin">Admin</span>
                                        {% endif %}
                                    </td>
                                    <td>
                                        {% if user.isBlocked %}
                                            <span style="background-color: #f8d7da; color: #842029; font-size: 0.75rem; padding: 0.35rem 0.65rem; border-radius: 2rem; font-weight: 600;">Blocked</span>
                                        {% else %}
                                            <span style="background-color: #d1e7dd; color: #0f5132; font-size: 0.75rem; padding: 0.35rem 0.65rem; border-radius: 2rem; font-weight: 600;">Active</span>
                                        {% endif %}
                                    </td>
                                    <td>
                                        <div class="d-flex">
                                            <button class="btn btn-action btn-view view-user-btn" title="View details" data-id="{{ user.id }}" data-firstname="{{ user.firstName }}" data-lastname="{{ user.lastName }}" data-email="{{ user.email }}" data-tel="{{ user.tel|default('') }}" data-role="{{ user.role.value }}" data-address="{{ user.address|default('') }}" data-blocked="{{ user.isBlocked ? '1' : '0' }}">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            {% if not user.isBlocked %}
                                                <button type="button" class="btn btn-action btn-warning block-user-btn-ajax" title="Block user" 
                                                    data-id="{{ user.id }}" 
                                                    data-name="{{ user.firstName }} {{ user.lastName }}"
                                                    data-token="{{ csrf_token('block' ~ user.id) }}">
                                                    <i class="fas fa-ban"></i>
                                                </button>
                                            {% else %}
                                                <button type="button" class="btn btn-action btn-success unblock-user-btn-ajax" title="Unblock user" 
                                                    data-id="{{ user.id }}" 
                                                    data-name="{{ user.firstName }} {{ user.lastName }}"
                                                    data-token="{{ csrf_token('unblock' ~ user.id) }}">
                                                    <i class="fas fa-unlock"></i>
                                                </button>
                                            {% endif %}
                                            <a href="{{ path('app_admin_users_edit', {'id': user.id}) }}" class="btn btn-action btn-edit" title="Edit user">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <form id="delete-form-{{ user.id }}" method="post" action="{{ path('app_admin_users_delete', {'id': user.id}) }}" style="display: inline-block;">
                                                <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ user.id) }}">
                                                <button type="button" class="btn btn-action btn-delete delete-user-btn" title="Delete user" data-id="{{ user.id }}" data-name="{{ user.firstName }} {{ user.lastName }}">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </form>
                                        </div>
                                    </td>
                                </tr>
                            {% else %}
                                <tr>
                                    <td colspan="6">
                                        <div class="empty-state">
                                            <i class="fas fa-users"></i>
                                            <h5>No Users Found</h5>
                                            <p>There are no users registered in the system yet.</p>
                                            <a href="{{ path('app_admin_users_new') }}" class="btn btn-primary mt-3">
                                                <i class="fas fa-plus me-2"></i> Add First User
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    
    <!-- User Details Modal -->
    <div class="modal fade modal-user-details" id="userDetailsModal" tabindex="-1" aria-labelledby="userDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="userDetailsModalLabel">User Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="card user-details-card">
                        <div class="user-details-header">
                            <div class="user-details-actions">
                                <a href="#" class="btn btn-edit" id="userEditBtn" title="Edit user">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <button type="button" class="btn btn-warning d-none btn-with-spinner" id="userBlockBtn" title="Block user">
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <i class="fas fa-ban"></i>
                                </button>
                                <button type="button" class="btn btn-success d-none btn-with-spinner" id="userUnblockBtn" title="Unblock user">
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <i class="fas fa-unlock"></i>
                                </button>
                                <button type="button" class="btn btn-delete" id="userDeleteBtn" title="Delete user">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                            <div class="user-details-avatar" id="userDetailsAvatar"></div>
                            <h2 class="user-details-name" id="userDetailsName"></h2>
                            <div class="d-flex gap-2 justify-content-center">
                                <span class="badge user-details-role" id="userDetailsRole"></span>
                                
                            </div>
                        </div>
                        <div class="user-details-info">
                            <div class="user-details-item">
                                <div class="user-details-icon">
                                    <i class="fas fa-id-card"></i>
                                </div>
                                <div class="user-details-content">
                                    <p class="user-details-label">ID</p>
                                    <p class="user-details-value"><code id="userDetailsId"></code></p>
                                </div>
                            </div>
                            <div class="user-details-item">
                                <div class="user-details-icon">
                                    <i class="fas fa-envelope"></i>
                                </div>
                                <div class="user-details-content">
                                    <p class="user-details-label">Email</p>
                                    <p class="user-details-value" id="userDetailsEmail"></p>
                                </div>
                            </div>
                            <div class="user-details-item" id="userDetailsTelContainer">
                                <div class="user-details-icon">
                                    <i class="fas fa-phone"></i>
                                </div>
                                <div class="user-details-content">
                                    <p class="user-details-label">Phone</p>
                                    <p class="user-details-value" id="userDetailsTel"></p>
                                </div>
                            </div>
                            <div class="user-details-item" id="userDetailsAddressContainer">
                                <div class="user-details-icon">
                                    <i class="fas fa-map-marker-alt"></i>
                                </div>
                                <div class="user-details-content">
                                    <p class="user-details-label">Address</p>
                                    <p class="user-details-value" id="userDetailsAddress"></p>
                                </div>
                            </div>
                            <div class="user-details-item">
                                <div class="user-details-icon">
                                    <i class="fas fa-user-shield"></i>
                                </div>
                                <div class="user-details-content">
                                    <p class="user-details-label">Account Status</p>
                                    <p class="user-details-value">
                                        <span class="badge status-badge" id="userDetailsStatusBadge"></span>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        $(document).ready(function() {
            // Initialize DataTable
            $('#usersTable').DataTable({
                "order": [[0, "asc"]],
                "pageLength": 5,
                "lengthMenu": [[5, 10, 25, 50, 100], [5, 10, 25, 50, 100]],
                "language": {
                    "search": "Search users :",
                    "lengthMenu": "Show _MENU_ users per page",
                    "info": "Showing _START_ to _END_ of _TOTAL_ users",
                    "infoEmpty": "No users available",
                    "infoFiltered": "(filtered from _MAX_ total users)",
                    "zeroRecords": "No matching users found"
                },
                "dom": '<"top"lf>rt<"bottom"ip>',
                "drawCallback": function() {
                    // Réattacher les événements après chaque redessinage du tableau
                    attachDeleteEvents();
                    attachViewEvents();
                }
            });
            
            // Notification AJAX
            function showNotification(message, type) {
                const notification = $('<div>').addClass('ajax-notification ' + type).text(message);
                $('body').append(notification);
                
                setTimeout(() => {
                    notification.addClass('show');
                }, 100);
                
                setTimeout(() => {
                    notification.removeClass('show');
                    setTimeout(() => {
                        notification.remove();
                    }, 300);
                }, 3000);
            }
            
            // Fonction pour attacher les événements de suppression
            function attachDeleteEvents() {
                // Utiliser la délégation d'événements pour les boutons de suppression
                $(document).off('click', '.delete-user-btn').on('click', '.delete-user-btn', function() {
                    const userId = $(this).data('id');
                    const userName = $(this).data('name');
                    
                    Swal.fire({
                        title: 'Confirm Deletion',
                        html: `Are you sure you want to delete user <strong>${userName}</strong>?<br>This action cannot be undone.`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#dc3545',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: 'Yes, delete',
                        cancelButtonText: 'Cancel',
                        reverseButtons: true,
                        focusCancel: true
                    }).then((result) => {
                        if (result.isConfirmed) {
                            document.getElementById(`delete-form-${userId}`).submit();
                        }
                    });
                });
                
                // Block user event with AJAX
                $(document).off('click', '.block-user-btn-ajax').on('click', '.block-user-btn-ajax', function() {
                    const userId = $(this).data('id');
                    const userName = $(this).data('name');
                    const token = $(this).data('token');
                    const button = $(this);
                    
                    Swal.fire({
                        title: 'Block User',
                        html: `Are you sure you want to block user <strong>${userName}</strong>?<br>They will no longer be able to log in.`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#ffc107',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: 'Yes, block',
                        cancelButtonText: 'Cancel',
                        reverseButtons: true,
                        focusCancel: true
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Show loading state
                            Swal.fire({
                                title: 'Processing...',
                                text: 'Please wait while we process your request.',
                                allowOutsideClick: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });
                            
                            // Send AJAX request
                            $.ajax({
                                url: `/admin/users/${userId}/block`,
                                type: 'POST',
                                data: {
                                    _token: token
                                },
                                success: function(response) {
                                    Swal.fire({
                                        title: 'Success!',
                                        text: response.message,
                                        icon: 'success',
                                        confirmButtonText: 'OK'
                                    }).then(() => {
                                        // Reload the page to update the UI
                                        location.reload();
                                    });
                                },
                                error: function(xhr) {
                                    // Remove loading state
                                    button.removeClass('loading');
                                    
                                    let errorMessage = 'An error occurred while processing your request.';
                                    if (xhr.responseJSON && xhr.responseJSON.message) {
                                        errorMessage = xhr.responseJSON.message;
                                    }
                                    
                                    Swal.fire({
                                        title: 'Error!',
                                        text: errorMessage,
                                        icon: 'error',
                                        confirmButtonText: 'OK'
                                    });
                                }
                            });
                        }
                    });
                });
                
                // Unblock user event with AJAX
                $(document).off('click', '.unblock-user-btn-ajax').on('click', '.unblock-user-btn-ajax', function() {
                    const userId = $(this).data('id');
                    const userName = $(this).data('name');
                    const token = $(this).data('token');
                    const button = $(this);
                    
                    Swal.fire({
                        title: 'Unblock User',
                        html: `Are you sure you want to unblock user <strong>${userName}</strong>?<br>They will be able to log in again.`,
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#198754',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: 'Yes, unblock',
                        cancelButtonText: 'Cancel',
                        reverseButtons: true,
                        focusCancel: true
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Show loading state
                            Swal.fire({
                                title: 'Processing...',
                                text: 'Please wait while we process your request.',
                                allowOutsideClick: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });
                            
                            // Send AJAX request
                            $.ajax({
                                url: `/admin/users/${userId}/unblock`,
                                type: 'POST',
                                data: {
                                    _token: token
                                },
                                success: function(response) {
                                    Swal.fire({
                                        title: 'Success!',
                                        text: response.message,
                                        icon: 'success',
                                        confirmButtonText: 'OK'
                                    }).then(() => {
                                        // Reload the page to update the UI
                                        location.reload();
                                    });
                                },
                                error: function(xhr) {
                                    // Remove loading state
                                    button.removeClass('loading');
                                    
                                    let errorMessage = 'An error occurred while processing your request.';
                                    if (xhr.responseJSON && xhr.responseJSON.message) {
                                        errorMessage = xhr.responseJSON.message;
                                    }
                                    
                                    Swal.fire({
                                        title: 'Error!',
                                        text: errorMessage,
                                        icon: 'error',
                                        confirmButtonText: 'OK'
                                    });
                                }
                            });
                        }
                    });
                });
                
                // Keep the old event handlers for compatibility
                $(document).off('click', '.block-user-btn').on('click', '.block-user-btn', function() {
                    const userId = $(this).data('id');
                    const userName = $(this).data('name');
                    
                    Swal.fire({
                        title: 'Block User',
                        html: `Are you sure you want to block user <strong>${userName}</strong>?<br>They will no longer be able to log in.`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#ffc107',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: 'Yes, block',
                        cancelButtonText: 'Cancel',
                        reverseButtons: true,
                        focusCancel: true
                    }).then((result) => {
                        if (result.isConfirmed) {
                            document.getElementById(`block-form-${userId}`).submit();
                        }
                    });
                });
                
                // Keep the old event handlers for compatibility
                $(document).off('click', '.unblock-user-btn').on('click', '.unblock-user-btn', function() {
                    const userId = $(this).data('id');
                    const userName = $(this).data('name');
                    
                    Swal.fire({
                        title: 'Unblock User',
                        html: `Are you sure you want to unblock user <strong>${userName}</strong>?<br>They will be able to log in again.`,
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#198754',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: 'Yes, unblock',
                        cancelButtonText: 'Cancel',
                        reverseButtons: true,
                        focusCancel: true
                    }).then((result) => {
                        if (result.isConfirmed) {
                            document.getElementById(`unblock-form-${userId}`).submit();
                        }
                    });
                });
            }
            
            // Fonction pour attacher les événements de visualisation des détails
            function attachViewEvents() {
                $(document).off('click', '.view-user-btn').on('click', '.view-user-btn', function() {
                    const userId = $(this).data('id');
                    const firstName = $(this).data('firstname');
                    const lastName = $(this).data('lastname');
                    const email = $(this).data('email');
                    const tel = $(this).data('tel');
                    const role = $(this).data('role');
                    const address = $(this).data('address');
                    const isBlocked = $(this).data('blocked') === 1;
                    
                    // Mettre à jour les détails de l'utilisateur dans la modal
                    $('#userDetailsId').text(userId);
                    $('#userDetailsName').text(firstName + ' ' + lastName);
                    $('#userDetailsEmail').text(email);
                    
                    // Show or hide blocked badge and buttons
                    if (isBlocked) {
                        // Update header badge
                        $('#userDetailsBlockedBadge')
                            .removeClass('d-none')
                            .addClass('bg-danger')
                            .removeClass('bg-success')
                            .text('Blocked');
                        
                        // Update status badge in details
                        $('#userDetailsStatusBadge')
                            .addClass('bg-danger')
                            .removeClass('bg-success')
                            .text('Blocked');
                        
                        // Show/hide action buttons
                        $('#userBlockBtn').addClass('d-none');
                        $('#userUnblockBtn').removeClass('d-none');
                    } else {
                        // Update header badge
                        $('#userDetailsBlockedBadge')
                            .removeClass('d-none')
                            .addClass('bg-success')
                            .removeClass('bg-danger')
                            .text('Active');
                        
                        // Update status badge in details
                        $('#userDetailsStatusBadge')
                            .addClass('bg-success')
                            .removeClass('bg-danger')
                            .text('Active');
                        
                        // Show/hide action buttons
                        $('#userBlockBtn').removeClass('d-none');
                        $('#userUnblockBtn').addClass('d-none');
                    }
                    
                    // Gérer l'affichage du téléphone
                    if (tel && tel !== '') {
                        $('#userDetailsTel').text(tel);
                        $('#userDetailsTelContainer').show();
                    } else {
                        $('#userDetailsTelContainer').hide();
                    }
                    
                    // Gérer l'affichage de l'adresse
                    if (address && address !== '') {
                        $('#userDetailsAddress').text(address);
                        $('#userDetailsAddressContainer').show();
                    } else {
                        $('#userDetailsAddressContainer').hide();
                    }
                    
                    // Gérer l'affichage du rôle avec la bonne classe
                    let roleText = '';
                    let roleClass = '';
                    
                    if (role === 'ROLE_MAINTENANCE') {
                        roleText = 'MAINTENANCE';
                        roleClass = 'badge-role-user';
                    } else if (role === 'ROLE_ADMIN') {
                        roleText = 'ADMIN';
                        roleClass = 'badge-role-admin';
                    } else if (role === 'ROLE_SUPER_ADMIN') {
                        roleText = 'Super Admin';
                        roleClass = 'badge-role-super-admin';
                    }
                    
                    $('#userDetailsRole').text(roleText).removeClass().addClass('badge badge-role ' + roleClass);
                    
                    // Mettre à jour l'avatar
                    $('#userDetailsAvatar').text(firstName.charAt(0).toUpperCase() + lastName.charAt(0).toUpperCase());
                    
                    // Mettre à jour les liens d'action
                    $('#userEditBtn').attr('href', '/admin/users/' + userId + '/edit');
                    $('#userDeleteBtn').attr('data-id', userId);
                    $('#userDeleteBtn').attr('data-name', firstName + ' ' + lastName);
                    
                    // Get CSRF tokens for block/unblock actions
                    const blockToken = $(`button.block-user-btn-ajax[data-id="${userId}"]`).data('token');
                    const unblockToken = $(`button.unblock-user-btn-ajax[data-id="${userId}"]`).data('token');
                    
                    // Set up block/unblock buttons
                    $('#userBlockBtn').attr('data-id', userId);
                    $('#userBlockBtn').attr('data-name', firstName + ' ' + lastName);
                    $('#userBlockBtn').attr('data-token', blockToken);
                    $('#userUnblockBtn').attr('data-id', userId);
                    $('#userUnblockBtn').attr('data-name', firstName + ' ' + lastName);
                    $('#userUnblockBtn').attr('data-token', unblockToken);
                    
                    // Afficher la modal
                    const userDetailsModal = new bootstrap.Modal(document.getElementById('userDetailsModal'));
                    userDetailsModal.show();
                });
                
                // Gérer le clic sur le bouton de suppression dans la modal
                $(document).off('click', '#userDeleteBtn').on('click', '#userDeleteBtn', function() {
                    const userId = $(this).data('id');
                    const userName = $(this).data('name');
                    
                    // Fermer la modal de détails
                    bootstrap.Modal.getInstance(document.getElementById('userDetailsModal')).hide();
                    
                    // Afficher la confirmation de suppression
                    Swal.fire({
                        title: 'Confirm Deletion',
                        html: `Are you sure you want to delete user <strong>${userName}</strong>?<br>This action cannot be undone.`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#dc3545',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: 'Yes, delete',
                        cancelButtonText: 'Cancel',
                        reverseButtons: true,
                        focusCancel: true
                    }).then((result) => {
                        if (result.isConfirmed) {
                            document.getElementById(`delete-form-${userId}`).submit();
                        }
                    });
                });
                
                // Handle block button in modal with AJAX
                $(document).off('click', '#userBlockBtn').on('click', '#userBlockBtn', function() {
                    const userId = $(this).data('id');
                    const userName = $(this).data('name');
                    const button = $(this);
                    const modal = bootstrap.Modal.getInstance(document.getElementById('userDetailsModal'));
                    
                    // Show block confirmation
                    Swal.fire({
                        title: 'Block User',
                        html: `Are you sure you want to block user <strong>${userName}</strong>?<br>They will no longer be able to log in.`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#ffc107',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: 'Yes, block',
                        cancelButtonText: 'Cancel',
                        reverseButtons: true,
                        focusCancel: true
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Close the modal
                            modal.hide();
                            
                            // Show loading state on button
                            button.addClass('loading');
                            
                            // Show loading state
                            Swal.fire({
                                title: 'Processing...',
                                text: 'Please wait while we process your request.',
                                allowOutsideClick: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });
                            
                            // Create CSRF token
                            const blockToken = $(`button.block-user-btn-ajax[data-id="${userId}"]`).data('token');
                            
                            // Send AJAX request
                            $.ajax({
                                url: `/admin/users/${userId}/block`,
                                type: 'POST',
                                data: {
                                    _token: blockToken
                                },
                                success: function(response) {
                                    Swal.fire({
                                        title: 'Success!',
                                        text: response.message,
                                        icon: 'success',
                                        confirmButtonText: 'OK'
                                    }).then(() => {
                                        // Reload the page to update the UI
                                        location.reload();
                                    });
                                },
                                error: function(xhr) {
                                    // Remove loading state
                                    button.removeClass('loading');
                                    
                                    let errorMessage = 'An error occurred while processing your request.';
                                    if (xhr.responseJSON && xhr.responseJSON.message) {
                                        errorMessage = xhr.responseJSON.message;
                                    }
                                    
                                    Swal.fire({
                                        title: 'Error!',
                                        text: errorMessage,
                                        icon: 'error',
                                        confirmButtonText: 'OK'
                                    });
                                }
                            });
                        }
                    });
                });
                
                // Handle unblock button in modal with AJAX
                $(document).off('click', '#userUnblockBtn').on('click', '#userUnblockBtn', function() {
                    const userId = $(this).data('id');
                    const userName = $(this).data('name');
                    const button = $(this);
                    const modal = bootstrap.Modal.getInstance(document.getElementById('userDetailsModal'));
                    
                    // Show unblock confirmation
                    Swal.fire({
                        title: 'Unblock User',
                        html: `Are you sure you want to unblock user <strong>${userName}</strong>?<br>They will be able to log in again.`,
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#198754',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: 'Yes, unblock',
                        cancelButtonText: 'Cancel',
                        reverseButtons: true,
                        focusCancel: true
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Close the modal
                            modal.hide();
                            
                            // Show loading state on button
                            button.addClass('loading');
                            
                            // Show loading state
                            Swal.fire({
                                title: 'Processing...',
                                text: 'Please wait while we process your request.',
                                allowOutsideClick: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });
                            
                            // Create CSRF token
                            const unblockToken = $(`button.unblock-user-btn-ajax[data-id="${userId}"]`).data('token');
                            
                            // Send AJAX request
                            $.ajax({
                                url: `/admin/users/${userId}/unblock`,
                                type: 'POST',
                                data: {
                                    _token: unblockToken
                                },
                                success: function(response) {
                                    Swal.fire({
                                        title: 'Success!',
                                        text: response.message,
                                        icon: 'success',
                                        confirmButtonText: 'OK'
                                    }).then(() => {
                                        // Reload the page to update the UI
                                        location.reload();
                                    });
                                },
                                error: function(xhr) {
                                    // Remove loading state
                                    button.removeClass('loading');
                                    
                                    let errorMessage = 'An error occurred while processing your request.';
                                    if (xhr.responseJSON && xhr.responseJSON.message) {
                                        errorMessage = xhr.responseJSON.message;
                                    }
                                    
                                    Swal.fire({
                                        title: 'Error!',
                                        text: errorMessage,
                                        icon: 'error',
                                        confirmButtonText: 'OK'
                                    });
                                }
                            });
                        }
                    });
                });
            }
            
            // Attacher les événements au chargement initial
            attachDeleteEvents();
            attachViewEvents();
        });
    </script>
{% endblock %} 